<!DOCTYPE HTML>
<html>
<head>
    <meta charset="UTF-8">
    <title>Air Quality Visualization</title>
    <meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <link rel="stylesheet" href="resources/bootstrap.min.css">
    <link rel="stylesheet" href="resources/leaflet.css">
    <script src="resources/jquery-3.5.1.min.js"></script>
    <script src="resources/bootstrap.bundle.min.js"></script>
    <script src="resources/leaflet.js"></script>
    <style type="text/css">
        body {
            padding: 0;
            margin: 0;
        }
        
        html, body, #map {
            height: 100%;
            overflow:hidden;
        }

        .leaflet-marker-icon{
            background:none;
            color:#fff;
            white-space:nowrap;
            padding:2px;
            border:none;
        }
        .name{
            margin:-12px 0 0 10px;
            background-color:rgba(0,17,35,0.5);
            border-radius:5px;
            padding:3px 5px;
        }
        .name a{
            color:#fff !important;
            text-decoration:none;
        }
        .leaflet-popup-content td{
            vertical-align:top;
        }

        #forecast-bar {
            position: fixed;
            display: flex;
            flex-wrap: wrap;
            left: 5%;
            right: 5%;
            bottom: 5%;
            /* background-color:white; */
            z-index: 999;
        }

        #download-data {
            width: 100px;
            float: left;
            background: #fff;
            border: 1px solid #ccc;

            text-decoration: none;
            color: #000;
            text-align: center;
        }

        #forecast-slider-wrapper {
            flex-grow: 1;
            margin-left: 5px;
            display: flex;
            vertical-align: middle;
        }

        #forecast-slider {
            width: 100%;
        }

        #preload {
            z-index: -1;
            position: fixed;
        }
    </style>
</head>
<body>
    <div id="map"></div>
    <div id="forecast-bar">
        <a id="download-data" href="results/all.csv" target="_blank">Download Data</a>
        <select id="data-type">
            <!--<option value='bme680_co2'>CO2 (BME680)</option>-->
            <option value='bme680_hum'>Humidity (BME680)</option>
            <!--<option value='bme680_iaq'>Indoor Air Quality (BME680)</option>-->
            <option value='bme680_prs'>Pressure (BME680)</option>
            <option value='bme680_tmp'>Temperature (BME680)</option>
            <!--<option value='bme680_tvoc'>TVOC (BME680)</option>-->
            <option value='mics_co'>CO (MICS6814)</option>
            <option value='mics_no2'>NO2 (MICS6814)</option>
            <option value='pms5003_pm1'>PM1 (PMS5003)</option>
            <option value='pms5003_pm2_5'>PM2.5 (PMS5003)</option>
            <option value='pms5003_pm10'>PM10 (PMS5003)</option>
        </select>
        <div id="forecast-slider-wrapper">
            <input type="range" min="0" max="1000" value="0" id="forecast-slider">
        </div>
    </div>
    <div id="preload"></div>
    <script>
        "use strict";
        window.onload = function() {
            let map = L.map("map", {
                center: [30.5186465, 120.7249815],
                zoom: 16,
                zoomControl: false,
                minZoom: 15,
                maxZoom: 20,
                maxBounds: [[30.48,120.68],[30.55,120.77]],
            });
            let mapLayers = {
                'Amap / Streets':L.tileLayer('//webrd0{s}.is.autonavi.com/appmaptile?lang=zh_cn&size=1&scale=1&style=8&x={x}&y={y}&z={z}', {
                    maxZoom: 20,
                    maxNativeZoom: 18,
                    minZoom: 3,
                    attribution: "Amap.cn",
                    subdomains: "1234"
                }),
                'GeoQ / Streets':L.tileLayer('//map.geoq.cn/ArcGIS/rest/services/ChinaOnlineStreetPurplishBlue/MapServer/tile/{z}/{y}/{x}', {
                    maxZoom: 20,
                    maxNativeZoom: 16,
                    minZoom: 3,
                    attribution: "GeoQ.cn"
                }).addTo(map)
            }
            L.control.layers(mapLayers, {}, {
                position: 'topright',
                collapsed: true
            }).addTo(map);
            L.control.zoom({
                zoomInTitle: 'Zoom In',
                zoomOutTitle: 'Zoom Out'
            }).addTo(map);
            map.on('click', function(e) {
                console.log(e.latlng);
            });

            let setOverlay = function(filename) {
                if(setOverlay._lastLayer) {
                    if(setOverlay._lastLayer._url == filename) return;
                    map.removeLayer(setOverlay._lastLayer);
                }
                setOverlay._lastLayer = L.imageOverlay(filename, [
                    [30.512, 120.719],
                    [30.525, 120.735]
                ], {
                    'opacity': 0.5,
                    'className': 'image-overlay'
                }).addTo(map);
            };

            let selectionUpdate = function() {
                let progressImages = 11;

                let metric = document.getElementById("data-type").value;

                if(metric != selectionUpdate.metric) {
                    // User selected new metric, Regenerate preloaders
                    document.getElementById('preload').innerHTML = '';
                    for(let i = 0; i < progressImages; i++) {
                        let element = document.createElement('img');
                        element.src = 'results/' + metric + '_' + i + '.png';
                        document.getElementById('preload').appendChild(element);
                    }
                }

                let slider = document.getElementById("forecast-slider");
                let progress = (slider.value - slider.min) / (slider.max - slider.min) * progressImages;
                if(progress > progressImages - 1) progress = progressImages - 1;
                setOverlay('results/' + metric + '_' + Math.floor(progress) + '.png')
            }

            document.getElementById("forecast-slider").oninput = selectionUpdate;
            document.getElementById("data-type").onchange = selectionUpdate;
            selectionUpdate();

            let metrics = {
                // 'bme680_co2'   : 'CO2 (BME680)',
                'bme680_hum'   : 'Humidity (BME680)',
                // 'bme680_iaq'   : 'Indoor Air Quality (BME680)',
                'bme680_prs'   : 'Pressure (BME680)',
                'bme680_tmp'   : 'Temperature (BME680)',
                // 'bme680_tvoc'  : 'TVOC (BME680)',
                'mics_co'      : 'CO (MICS6814)',
                'mics_no2'     : 'NO2 (MICS6814)',
                'pms5003_pm1'  : 'PM1 (PMS5003)',
                'pms5003_pm2_5': 'PM2.5 (PMS5003)',
                'pms5003_pm10' : 'PM10 (PMS5003)',
                'stm32_vbat'   : 'STM32 Battery Voltage',
                'stm32_tmp'    : 'STM32 Chip Temperature',
                'stm32_vref'   : 'STM32 3.3V Rail Voltage',
                'gps_lat'      : 'GPS Latitude',
                'gps_lon'      : 'GPS Longitude',
            };

            let units = {
                'bme680_co2'   : 'ppm',
                'bme680_hum'   : '%',
                'bme680_iaq'   : '',
                'bme680_prs'   : 'Pa',
                'bme680_tmp'   : '°C',
                'bme680_tvoc'  : 'ppm',
                'mics_co'      : 'mg/m3',
                'mics_no2'     : 'ug/m3',
                'pms5003_pm1'  : 'ug/m3',
                'pms5003_pm2_5': 'ug/m3',
                'pms5003_pm10' : 'ug/m3',
                'stm32_vbat'   : 'V',
                'stm32_tmp'    : '°C',
                'stm32_vref'   : 'V',
                'gps_lat'      : '',
                'gps_lon'      : '',
            };


            $.getJSON('results/all.json', function(data) {
                L.geoJson(data, {
                    pointToLayer: function(feature, latlng) {
                        console.log(feature);

                        let popup = "<div><table>";
                        for(let key in metrics) {
                            popup += "<tr><td>" + metrics[key] 
                                  + "</td><td class='text-right'>" + parseFloat(feature.properties[key]).toFixed(4)
                                  + "</td><td>" + units[key] + "</td></tr>";
                        }
                        popup += "</table></div>";

                        L.circleMarker(latlng, {
                            radius: 3,
                            color: '#fff',
                            opacity: 1,
                            fill: true,
                            weight: 2,
                            fillColor: '#fff',
                            fillOpacity: 1
                        }).addTo(map);
                        L.marker(latlng, {
                            icon: L.divIcon({
                                iconSize: null,
                                html: '<div class="name"><a href="#" onclick="return false">'
                                    + feature.properties.id
                                    + '</a></div>'
                            })
                        }).bindPopup(popup).addTo(map);
                    }
                });
            });

        }
    </script>
</body>
</html>